Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table =  10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 (primary key: id)
ii. Hours = 1562 (foreign key: business_id)
iii. Category = 2643 (foreign key: business_id)
iv. Attribute = 1115 (foreign key: business_id)
v. Review = 10000 (primary key: id)
vi. Checkin = 493 (foreign key: business_id)
vii. Photo = 10000 (primary key: id)
viii. Tip = 537 (foreign key: user_id)
ix. User = 10000 (primary key: id)
x. Friend = 11 (foreign key: user_id)
xi. Elite_years = 2780 (foreign key: user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:

	select * from user where
  	  name is null or
	  review_count is null or
	  yelping_since is null or 
	  useful is null or 
	  funny is null or 
	  cool is null or 
	  fans is null or 
	  average_stars is null or 
	  compliment_hot is null or 
	  compliment_more is null or 
	  compliment_profile is null or 
	  compliment_cute is null or 
	  compliment_list is null or 
	  compliment_note is null or 
	  compliment_plain is null or 
	  compliment_cool is null or 
	  compliment_funny is null or 
	  compliment_writer is null or 
	  compliment_photos is null
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	select distinct a.city,
	(select sum(review_count) from business b where b.city = a.city) as r
	from business a
	order by r desc
	
	Copy and Paste the Result Below:

+-----------------+-------+
| city            |     r |
+-----------------+-------+
| Las Vegas       | 82854 |
| Phoenix         | 34503 |
| Toronto         | 24113 |
| Scottsdale      | 20614 |
| Charlotte       | 12523 |
| Henderson       | 10871 |
| Tempe           | 10504 |
| Pittsburgh      |  9798 |
| Montréal        |  9448 |
| Chandler        |  8112 |
| Mesa            |  6875 |
| Gilbert         |  6380 |
| Cleveland       |  5593 |
| Madison         |  5265 |
| Glendale        |  4406 |
| Mississauga     |  3814 |
| Edinburgh       |  2792 |
| Peoria          |  2624 |
| North Las Vegas |  2438 |
| Markham         |  2352 |
| Champaign       |  2029 |
| Stuttgart       |  1849 |
| Surprise        |  1520 |
| Lakewood        |  1465 |
| Goodyear        |  1155 |
+-----------------+-------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

select stars, count(stars) from business where city = 'Avon' group by stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+--------------+
| stars | count(stars) |
+-------+--------------+
|   1.5 |            1 |
|   2.5 |            2 |
|   3.5 |            3 |
|   4.0 |            2 |
|   4.5 |            1 |
|   5.0 |            1 |
+-------+--------------+

ii. Beachwood

SQL code used to arrive at answer:

select stars, count(stars) from business where city = 'Beachwood' group by stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------+--------------+
| stars | count(stars) |
+-------+--------------+
|   2.0 |            1 |
|   2.5 |            1 |
|   3.0 |            2 |
|   3.5 |            2 |
|   4.0 |            1 |
|   4.5 |            2 |
|   5.0 |            5 |
+-------+--------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

        select name, review_count from user order by review_count desc limit 3
		
	Copy and Paste the Result Below:

        +--------+--------------+
        | name   | review_count |
        +--------+--------------+
        | Gerald |         2000 |
        | Sara   |         1629 |
        | Yuri   |         1339 |
        +--------+--------------+	

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

Using the following SQL search to create rough bins:

select case
  when review_count <= 100 then '0-100'
  when review_count > 100 and review_count <= 250 then '101-250'
  when review_count > 250 and review_count <= 500 then '251-500'
  when review_count > 500 and review_count <= 1000 then '501-1000'
  when review_count > 1000 then '1000+'
  else 'invalid'
  end review_bin, avg(fans)
from user
group by review_bin

We get the following results:

+------------+--------------------+
| review_bin |          avg(fans) |
+------------+--------------------+
| 0-99       | 0.4311017395888245 |
| 100-249    | 10.456140350877194 |
| 250-499    |             25.104 |
| 500-999    |               76.4 |
| 999+       |            129.625 |
+------------+--------------------+

Suggesting that there may be a correlation between how many reviews a user submits and the number of fans they acquire.
This is a rather coarse analysis so further study would be warranted to confirm the strength of correlation.
It is possible the correlation is not highly predictive. For example, with the query

select name, review_count, fans from user order by review_count desc limit 10

The resultant table

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
+-----------+--------------+------+

Suggests that the correlation is not particularly predictive.
For example Sara, the second highest reviewer by count, has fewer fans than almost everyone else in the top 10.
Two of the top 10 have more reviews than Gerald, the highest reviewer by count.	
Using Python to ingest the data into a frame and computing the correlation would provide a more definitive answer.
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Love
	
	SQL code used to arrive at answer:

select case
  when text like "%love%" then 'love'
  when text like "%hate%" then 'hate'
  else 'none'
  end lovevshate, count(text)
from review
group by lovevshate
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

        select name, fans from user order by fans desc limit 10
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

Choosing city = Toronto , category = Restaurants
	
i. Do the two groups you chose to analyze have a different distribution of hours? Yes, it does seem as if the two groups have different distributions of hours. 

The 2-3 star group features businesses that close relatively early. There are only two businesses that stay open past midnight (to 4am).
These businesses also feature a single set of hours - the business is continuously open with no break in hours for slow parts of the day.

+-----------------------+----------+
| hours                 | count(*) |
+-----------------------+----------+
| Friday|10:30-21:00    |        1 |
| Friday|11:00-23:00    |        1 |
| Friday|9:00-4:00      |        1 |
| Monday|10:30-21:00    |        1 |
| Monday|11:00-23:00    |        1 |
| Monday|9:00-23:00     |        1 |
| Saturday|10:00-4:00   |        1 |
| Saturday|10:30-21:00  |        1 |
| Saturday|11:00-23:00  |        1 |
| Sunday|10:00-23:00    |        1 |
| Sunday|11:00-19:00    |        1 |
| Sunday|11:00-23:00    |        1 |
| Thursday|10:30-21:00  |        1 |
| Thursday|11:00-23:00  |        1 |
| Thursday|9:00-23:00   |        1 |
| Tuesday|10:30-21:00   |        1 |
| Tuesday|11:00-23:00   |        1 |
| Tuesday|9:00-23:00    |        1 |
| Wednesday|10:30-21:00 |        1 |
| Wednesday|11:00-23:00 |        1 |
| Wednesday|9:00-23:00  |        1 |
+-----------------------+----------+

The 4-5 star group has more businesses that stay open past midnight, until 2am. This group also features more businesses with 'evening only' hours.

+-----------------------+----------+
| hours                 | count(*) |
+-----------------------+----------+
| Friday|11:00-23:00    |        1 |
| Friday|18:00-23:00    |        1 |
| Friday|18:00-2:00     |        1 |
| Monday|11:00-23:00    |        1 |
| Monday|16:00-2:00     |        1 |
| Saturday|11:00-23:00  |        1 |
| Saturday|16:00-2:00   |        1 |
| Saturday|18:00-23:00  |        1 |
| Sunday|12:00-16:00    |        1 |
| Sunday|14:00-23:00    |        1 |
| Sunday|16:00-2:00     |        1 |
| Thursday|11:00-23:00  |        1 |
| Thursday|18:00-23:00  |        1 |
| Thursday|18:00-2:00   |        1 |
| Tuesday|11:00-23:00   |        1 |
| Tuesday|18:00-2:00    |        1 |
| Wednesday|11:00-23:00 |        1 |
| Wednesday|18:00-23:00 |        1 |
| Wednesday|18:00-2:00  |        1 |
+-----------------------+----------+

SQL code used for analysis:

select hours, count(*)
from business
join category on category.business_id = business.id
join hours on hours.business_id = business.id
where
    category.category = 'Restaurants' and
    business.city = 'Toronto' and
    business.stars >= 2(4) and business.stars <= 3(5)
group by hours.hours
order by hours.hours

ii. Do the two groups you chose to analyze have a different number of reviews? Yes, there is a significant difference in the average number of reviews between the two groups.

+-----------+----------+--------------------+
| starbins  | count(*) |  avg(review_count) |
+-----------+----------+--------------------+
| 2-3 stars |        3 | 28.666666666666668 |
| 4-5 stars |        5 |               41.2 |
| other     |        2 |                3.5 |
+-----------+----------+--------------------+

SQL code used for analysis:

select case
  when business.stars >= 2.0 and business.stars <= 3.0 then '2-3 stars'
  when business.stars >= 4.0 and business.stars <= 5.0 then '4-5 stars'
  else 'other'
  end starbins, count(*), avg(review_count)
from business join category on business.id = category.business_id
where category.category = 'Restaurants' and business.city = 'Toronto'
group by starbins
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

While the distinction between average latitudes is relatively minimal between the two groups, there does seem to be a distinct difference in average longitude.
This implies a North / South division in the city of Toronto. Perhaps South Toronto is nicer than North Toronto, or has a more vibrant business scene.

+-----------+------------------------+-------------------------+
| starbins  | avg(business.latitude) | avg(business.longitude) |
+-----------+------------------------+-------------------------+
| 2-3 stars |     43.654633333333344 |                -79.3832 |
| 4-5 stars |      43.67998000000001 |               -79.44802 |
| other     |               43.74635 |               -79.42155 |
+-----------+------------------------+-------------------------+

SQL code used for analysis:

select case
  when business.stars >= 2.0 and business.stars <= 3.0 then '2-3 stars'
  when business.stars >= 4.0 and business.stars <= 5.0 then '4-5 stars'
  else 'other'
  end starbins, avg(business.latitude), avg(business.longitude)
from business join category on business.id = category.business_id
where category.category = 'Restaurants' and business.city = 'Toronto'
group by starbins		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Unpopulated Neighborhood field. Businesses that are closed have lower (0.54 vs 0.62) probability of having no neighborhood defined for themselves.
		 This is actually the opposite of what I expected to find; I figured businesses with less online information may have a harder time attracting business and staying open.

+---------+--------------------+--------------------+--------------------+
| is_open | blank_neighborhood | total_neighborhood |              ratio |
+---------+--------------------+--------------------+--------------------+
|       0 |                824 |               1520 | 0.5421052631578948 |
|       1 |               5250 |               8480 | 0.6191037735849056 |
+---------+--------------------+--------------------+--------------------+

SQL code used for analysis:

select
    is_open,
    blank_neighborhood,
    total_neighborhood,
    cast(blank_neighborhood as float) / total_neighborhood as ratio
from (
    select
        is_open,
        count(*) as total_neighborhood,
        count(case when neighborhood="" then 1 end) as blank_neighborhood
    from business
    group by is_open
)
         
ii. Difference 2: Businesses that are closed have - on average - a higher proportion of 1 & 2 star reviews.
		  We may expect closed businesses to feature fewer reviews; however, the proportion of low reviews are significantly higher.
		  For closed businesses: 1.14 / 79.57 = 1.43 % . For open businesses: 1.03 / 222.54 = 0.46 % .

+---------+--------------------+----------------------------+
| is_open | avg(one_two_stars) | avg(business.review_count) |
+---------+--------------------+----------------------------+
|       0 | 1.1428571428571428 |          79.57142857142857 |
|       1 | 1.0338983050847457 |         222.54237288135593 |
+---------+--------------------+----------------------------+
         
SQL code used for analysis:

select
    business.is_open,
    avg(one_two_stars),
    avg(business.review_count)
from business join (
    select count(*) as one_two_stars, business_id
    from review
    where stars <= 2
    group by business_id) as subquery
on business.id = subquery.business_id
group by business.is_open	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
                  
iii. Output of your finished dataset:
         
         
iv. Provide the SQL code you used to create your final dataset:
